@page
@model BPMN.Pages.UpdateDiagramModel
@{
    ViewData["Title"] = "Update Diagram";
}

<head>
    <meta charset="utf-8">
    <title>BPMN Editor</title>
    <!-- Подключение стилей для диаграмм BPMN и иконок BPMN -->
    <link rel="stylesheet" href="https://unpkg.com/bpmn-js/dist/assets/diagram-js.css">
    <link rel="stylesheet" href="https://unpkg.com/bpmn-js/dist/assets/bpmn-font/css/bpmn.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-pzjw8f+ua7Kw1TIqH2FWP4j0SkmPIT3yKxxkIY8POB1Biy1/EmDyF/6NqmgjIv9k" crossorigin="anonymous">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <style>
        /* Стили для контейнера */
        #canvas {
            width: 100%;
            height: 80vh;
            border: solid 1px #ddd;
            margin-bottom: 20px;
            border-radius: 5px;
        }

        .bjs-powered-by {
            display: none; /* Сделать элемент невидимым */
        }

        .form-container {
            margin-bottom: 20px;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #004085;
            }

        .footer {
            text-align: center;
            margin-top: 20px;
        }
    </style>
</head>

<body>

    <div class="container">
        <h1 class="my-4">Редактор BPMN - @Model.DiagramName</h1>

        <!-- Контейнер для отображения редактора BPMN -->
        <div id="canvas"></div>

        <!-- Форма для сохранения диаграммы -->
        <form method="post" asp-page-handler="Save" class="form-container">
            <fieldset class="form-group">
                <!-- Поле для ввода имени диаграммы -->
                <label for="Name" class="form-label">Имя диаграммы:</label>
                <input type="text" id="Name" name="Name" class="form-control" value="@Model.DiagramName" maxlength="65" style="margin-bottom: 5px" required />

                <!-- Скрытое поле для передачи XML-кода диаграммы -->
                <input type="hidden" id="XMLDiagram" name="XMLDiagram" />

                <!-- Скрытое поле для передачи Id диаграммы -->
                <input type="hidden" id="Id" name="Id" value="@Model.DiagramId" />

                <!-- Скрытое поле для передачи projectId -->
                <input type="hidden" id="ProjectId" name="ProjectId" value="@Model.ProjectId" />
            </fieldset>

            <!-- Кнопка для сохранения диаграммы -->
            <button type="button" class="btn btn-primary" style="margin-bottom: 5px" onclick="exportBpmnXml()">Сохранить диаграмму</button>

            <!-- Кнопка для отправки формы -->
            <input hidden id="saveButton" type="submit" value="Save">
        </form>
        
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success" role="alert">
                <pre>@TempData["SuccessMessage"]</pre>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger" role="alert">
                @TempData["ErrorMessage"]
            </div>
        }
        
        <form method="post" asp-page-handler="ExecuteDiagram" asp-route-diagramId="@Model.DiagramId" asp-route-projectId="@Model.ProjectId" style="margin-bottom: 2px">
            <button type="submit" class="btn btn-success">Выполнить диаграмму</button>
        </form>
    </div>

    <!-- Подключение библиотеки bpmn-js Modeler -->
    <script src="https://unpkg.com/bpmn-js/dist/bpmn-modeler.development.js"></script>

    <script>
        // Создание экземпляра BPMN Modeler
        const modeler = new BpmnJS({ container: '#canvas' });

        // Функция для загрузки диаграммы
        function loadDiagram(bpmnXml) {
            console.log(bpmnXml)
            modeler.importXML(bpmnXml);
        }

        // Функция для загрузки диаграммы из файла
        function loadDiagramFromFile() {
            var diagramId = '@Model.DiagramId';

            // Путь к файлу с XML-кодом диаграммы
            const bpmnBaseFile = `/UpdateDiagram?handler=Diagram&diagramId=${diagramId}`;

            // Чтение содержимого файла
            fetch(bpmnBaseFile)
                .then(response => response.text())
                .then(bpmnXml => {
                    loadDiagram(bpmnXml);
                    deleteTempFile(diagramId);
                })
                .catch(error => {
                    console.error('Не удалось загрузить BPMN файл:', error);
                });
        }

        function deleteTempFile(diagramId) {
            fetch(`/UpdateDiagram?handler=DeleteTempFile&diagramId=${diagramId}`)
                .then(response => {
                    if (response.ok) {
                        console.log('Временный файл успешно удален.');
                    } else {
                        console.error('Не удалось удалить временный файл.');
                    }
                })
                .catch(error => {
                    console.error('Ошибка при удалении временного файла:', error);
                });
        }

        async function exportBpmnXml() {
            const { xml } = await modeler.saveXML({ format: true });

            // Найти элемент input по его id
            const xmlInput = document.getElementById('XMLDiagram');

            // Установить значение xml в поле input
            xmlInput.value = xml;

            const saveButton = document.getElementById('saveButton');
            saveButton.click();
        }

        // Вызываем функцию загрузки диаграммы из файла при загрузке страницы
        loadDiagramFromFile();
    </script>
</body>
